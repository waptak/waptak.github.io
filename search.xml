<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>LangChain_Chatchat+ChatGLM3环境搭建（Windows），打造自己的GPT和知识库</title>
      <link href="/2024/03/07/Lanchain_ChatChat%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88Windows%EF%BC%89/"/>
      <content type="html"><![CDATA[<h2 id="系统环境准备"><a href="#系统环境准备" class="headerlink" title="系统环境准备"></a>系统环境准备</h2><ul><li>安装git和lfs，<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></li><li>Anaconda环境安装，<a href="https://www.anaconda.com/download" target="_blank" rel="noopener">https://www.anaconda.com/download</a><ul><li>系统环境变量Path添加配置<ul><li>D:\Projects_Test\Anaconda\Scripts</li><li>D:\Projects_Test\Anaconda</li></ul></li></ul></li><li>安装N卡驱动和CUDA Toolkit安装 <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-downloads</a>，并查看cuda版本，确保和项目环境匹配<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvidia-smi</span><br><span class="line">$ nvcc --version</span><br></pre></td></tr></table></figure></li></ul><h2 id="软件虚拟环境准备"><a href="#软件虚拟环境准备" class="headerlink" title="软件虚拟环境准备"></a>软件虚拟环境准备</h2><ul><li><p>新建conda虚拟环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置清华镜像源</span></span><br><span class="line">$ pip config <span class="built_in">set</span> global.index-url https://mirrors.cloud.tencent.com/pypi/simple/</span><br><span class="line"><span class="comment"># 拉取项目</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/chatchat-space/Langchain-Chatchat.git</span><br><span class="line">$ <span class="built_in">cd</span> Langchain-Chatchat</span><br><span class="line"><span class="comment"># 新建虚拟环境并激活</span></span><br><span class="line">$ conda create -n LangChain_ChatGLM python=3.11</span><br><span class="line">$ conda activate LangChain_ChatGLM</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">$ pip install -r requirements.txt </span><br><span class="line">$ pip install -r requirements_api.txt</span><br><span class="line">$ pip install -r requirements_webui.txt</span><br></pre></td></tr></table></figure></li><li><p>配置</p><ul><li><p>生成配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python copy_config_example.py</span><br></pre></td></tr></table></figure></li><li><p>修改配置 <code>/configs/model_config.py</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 离线模型路径</span></span><br><span class="line">MODEL_ROOT_PATH = <span class="string">"D:\Projects_Test\ChatGLM\Langchain-Chatchat"</span></span><br><span class="line"><span class="comment"># 选用的 Embedding 名称</span></span><br><span class="line">EMBEDDING_MODEL = <span class="string">"bge-large-zh"</span></span><br><span class="line"></span><br><span class="line">MODEL_PATH = &#123;</span><br><span class="line">    <span class="string">"embed_model"</span>: &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="string">"bge-large-zh"</span>: <span class="string">"my_models/bge-large-zh"</span>,</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"llm_model"</span>: &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="string">"chatglm3-6b"</span>: <span class="string">"my_models/chatglm3-6b"</span>,</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如想外部能访问，可修改<code>/configs/server_config.py</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># webui.py server</span></span><br><span class="line">WEBUI_SERVER = &#123;</span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"port"</span>: <span class="number">8501</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># api.py server</span></span><br><span class="line">API_SERVER = &#123;</span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="string">"port"</span>: <span class="number">7861</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li><p>初始化知识库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python init_database.py --recreate-vs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果报错 no module named “pwd” ，需要降低`langchain-community`版本</span></span><br><span class="line">$ pip install langchain-community==0.0.19</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python startup.py -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错 Torch not compiled with CUDA enabled  查看 https://pytorch.org/get-started/previous-versions/</span></span><br><span class="line">$ conda install pytorch==2.2.0 torchvision==0.17.0 torchaudio==2.2.0 pytorch-cuda=12.1 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure></li><li><p>效果<br><img src="https://biake.vip/images/lanchain_demo.gif" alt="DEMO"></p></li></ul><h2 id="离线模型下载地址"><a href="#离线模型下载地址" class="headerlink" title="离线模型下载地址"></a>离线模型下载地址</h2><ul><li><a href="https://huggingface.co/THUDM/chatglm3-6b" target="_blank" rel="noopener">https://huggingface.co/THUDM/chatglm3-6b</a></li><li><a href="https://modelscope.cn/models/ZhipuAI/chatglm3-6b/summary" target="_blank" rel="noopener">https://modelscope.cn/models/ZhipuAI/chatglm3-6b/summary</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> LanChain </tag>
            
            <tag> ChatGLM3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WSL2 运行慢的问题</title>
      <link href="/2021/09/05/WSL2-%E8%BF%90%E8%A1%8C%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <content type="html"><![CDATA[<h3 id="问题描述-官方issue-https-github-com-microsoft-WSL-issues-4197"><a href="#问题描述-官方issue-https-github-com-microsoft-WSL-issues-4197" class="headerlink" title="问题描述 官方issue (https://github.com/microsoft/WSL/issues/4197)"></a>问题描述 官方issue (<a href="https://github.com/microsoft/WSL/issues/4197" target="_blank" rel="noopener">https://github.com/microsoft/WSL/issues/4197</a>)</h3><ul><li>项目放在挂载的<code>/mnt</code>目录会有I/O 慢的问题</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>项目文件不要放在<code>/mnt</code>目录即可</li></ul>]]></content>
      
      
        <tags>
            
            <tag> WSL2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>迁移Docker Desktop 镜像文件 (WSL2)</title>
      <link href="/2021/08/17/%E8%BF%81%E7%A7%BBDocker-Desktop-%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6-WSL2/"/>
      <content type="html"><![CDATA[<h3 id="迁移目录，到-D-WSL2"><a href="#迁移目录，到-D-WSL2" class="headerlink" title="迁移目录，到 D:\WSL2"></a>迁移目录，到 D:\WSL2</h3><ul><li>删除所有容器。</li><li>退出 Docker Desktop</li><li>迁移命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭所有</span></span><br><span class="line">wsl --shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否都是 stop 状态</span></span><br><span class="line">wsl --list --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份已有image数据</span></span><br><span class="line">wsl --<span class="built_in">export</span> docker-desktop-data D:\WSL2\docker-desktop-data.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注销当前的docker-desktop-data发行版, 该命令执行完成之后，再次使用wsl --list --verbose命令查看，docker-desktop-data就已经不在了。</span></span><br><span class="line">wsl --unregister docker-desktop-data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新导入备份的docker-desktop-data</span></span><br><span class="line">wsl --import docker-desktop-data D:\WSL2\docker-desktop-data D:\WSL2\docker-desktop-data.tar --version 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同上迁移 docker-desktop</span></span><br><span class="line">wsl --<span class="built_in">export</span> docker-desktop D:\WSL2\docker-desktop.tar</span><br><span class="line">wsl --unregister docker-desktop</span><br><span class="line">wsl --import docker-desktop D:\WSL2\docker-desktop D:\WSL2\docker-desktop.tar --version 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">wsl --list --verbose</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> WSL2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WSL2 安装 Ubuntu 18.04</title>
      <link href="/2021/07/16/WSL2-%E5%AE%89%E8%A3%85-Ubuntu-18-04/"/>
      <content type="html"><![CDATA[<h2 id="官方教程网址"><a href="#官方教程网址" class="headerlink" title="官方教程网址"></a><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#manual-installation-steps" target="_blank" rel="noopener">官方教程网址</a></h2><ul><li><p>可以在<code>控制面板</code>–&gt; <code>程序</code> –&gt; <code>启动和关闭功能</code>处开启，也可以使用以下命令开启</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用适用于 Linux 的 Windows 子系统</span></span><br><span class="line">dism.exe /online /<span class="built_in">enable</span>-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line"><span class="comment"># 启用虚拟机功能</span></span><br><span class="line">dism.exe /online /<span class="built_in">enable</span>-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure></li><li><p><strong><code>重启电脑</code>（重要）</strong></p></li><li><p>下载 Linux 内核更新包，并安装。见官网链接</p></li><li><p>已管理员身份开启PowerShell</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --<span class="built_in">set</span>-default-version 2</span><br></pre></td></tr></table></figure></li><li><p>到 Microsoft Store 选择 Ubuntu 18.04 安装</p></li></ul><h2 id="默认使用root"><a href="#默认使用root" class="headerlink" title="默认使用root"></a>默认使用<code>root</code></h2><ul><li>管理员身份打开PowerShell<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 到ubuntu应用目录，`CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc`目录名可能不一样</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"C:\Users\&lt;用户目录&gt;\AppData\Local\Microsoft\WindowsApps\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc"</span></span><br><span class="line">ubuntu1804.exe config --default-user root</span><br></pre></td></tr></table></figure></li></ul><h2 id="启动命令（包括固定ip，启动ssh，启动docker）-需管理员运行"><a href="#启动命令（包括固定ip，启动ssh，启动docker）-需管理员运行" class="headerlink" title="启动命令（包括固定ip，启动ssh，启动docker）,需管理员运行"></a>启动命令（包括固定ip，启动ssh，启动docker）,需管理员运行</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: 设置固定IP</span><br><span class="line">wsl -d Ubuntu-<span class="number">18</span>.<span class="number">04</span> -u root ip addr add <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">2</span>/<span class="number">24</span> broadcast <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">255</span> dev eth0 <span class="built_in">label</span> eth0:<span class="number">1</span></span><br><span class="line">netsh interface ip add address "vEthernet (WSL)" <span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">1</span> <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">:: 启动 ssh</span><br><span class="line">:: 或者 wsl -d Ubuntu-<span class="number">18</span>.<span class="number">04</span> -u root -e /etc/init.d/ssh restart</span><br><span class="line">wsl -d Ubuntu-<span class="number">18</span>.<span class="number">04</span> -u root service ssh restart</span><br><span class="line"></span><br><span class="line">:: 启动docker</span><br><span class="line">:: wsl -d Ubuntu-<span class="number">18</span>.<span class="number">04</span> -u root service docker restart</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>##　重启命令,需管理员运行<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> stop LxssManager</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> LxssManager</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure></p><h2 id="更换源-etc-apt-sources-list-清华镜像站"><a href="#更换源-etc-apt-sources-list-清华镜像站" class="headerlink" title="更换源 /etc/apt/sources.list 清华镜像站"></a>更换源 <code>/etc/apt/sources.list</code> <a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">清华镜像站</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><h2 id="使用windows的代理，打开当前用户的-bashrc-添加以下内容"><a href="#使用windows的代理，打开当前用户的-bashrc-添加以下内容" class="headerlink" title="使用windows的代理，打开当前用户的.bashrc , 添加以下内容"></a>使用windows的代理，打开当前用户的<code>.bashrc</code> , 添加以下内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostip=$(cat /etc/resolv.conf | grep nameserver | awk <span class="string">'&#123; print $2 &#125;'</span>)</span><br><span class="line">wslip=$(hostname -I | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">port=7890 <span class="comment"># 根据代理端口更改</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">poff</span></span>()&#123;</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"已关闭代理"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">pon</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">"localhost,127.0.0.1,localaddress,.localdomain.com"</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="string">"http://<span class="variable">$&#123;hostip&#125;</span>:<span class="variable">$&#123;port&#125;</span>"</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="variable">$http_proxy</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"已开启代理"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">test_setting</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Host ip:"</span> <span class="variable">$&#123;hostip&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"WSL ip:"</span> <span class="variable">$&#123;wslip&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Current proxy:"</span> <span class="variable">$https_proxy</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><ul><li><p>SSH访问失败问题</p><ul><li>缺少 ssh_host_rsa_key ssh_host_ecdsa_key ssh_host_ed25519_key<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service ssh restart</span><br><span class="line"><span class="comment"># 重启ssh服务提示</span></span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_rsa_key</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_ed25519_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新生成 key</span></span><br><span class="line">$ ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key</span><br><span class="line">$ ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">$ ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key</span><br><span class="line"></span><br><span class="line">$ service ssh restart</span><br></pre></td></tr></table></figure></li></ul></li><li><p>局域网访问 需端口映射</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: 列出所有映射</span><br><span class="line">netsh interface portproxy show all</span><br><span class="line">:: 增加端口 也可以用 listenaddress=*</span><br><span class="line">netsh interface portproxy add v4tov4 listenport=<span class="number">9898</span> listenaddress=<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span> connectport=<span class="number">9898</span> connectaddress=<span class="number">192</span>.<span class="number">168</span>.<span class="number">50</span>.<span class="number">2</span> protocol=tcp</span><br><span class="line">:: 删除端口</span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=<span class="number">9898</span> listenaddress=<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>windows无法被ubuntu访问， <a href="https://github.com/microsoft/WSL/issues/4171" target="_blank" rel="noopener">见官方issue</a></p><ul><li>打开高级防火墙</li><li>添加入站规则 ==》 自定义 ==》协议类型选择<code>ICMPV4</code></li></ul></li></ul>]]></content>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> WSL2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NodeJs调用DLL记录（含Electron）</title>
      <link href="/2020/10/02/NodeJs%E8%B0%83%E7%94%A8DLL%E8%AE%B0%E5%BD%95/"/>
      <content type="html"><![CDATA[<h3 id="最近涉及到华视身份证读卡器CVR-100U使用，官方有webservice方式使用更简单，这里记录下调用DLL方式实现"><a href="#最近涉及到华视身份证读卡器CVR-100U使用，官方有webservice方式使用更简单，这里记录下调用DLL方式实现" class="headerlink" title="最近涉及到华视身份证读卡器CVR-100U使用，官方有webservice方式使用更简单，这里记录下调用DLL方式实现"></a>最近涉及到华视身份证读卡器CVR-100U使用，官方有webservice方式使用更简单，这里记录下调用DLL方式实现</h3><h3 id="NodeJs示例-https-github-com-waptak-DLL-Reader"><a href="#NodeJs示例-https-github-com-waptak-DLL-Reader" class="headerlink" title="NodeJs示例 https://github.com/waptak/DLL-Reader"></a>NodeJs示例 <a href="https://github.com/waptak/DLL-Reader" target="_blank" rel="noopener">https://github.com/waptak/DLL-Reader</a></h3><h3 id="Electron示例-https-github-com-waptak-Electron-DLL-Reader"><a href="#Electron示例-https-github-com-waptak-Electron-DLL-Reader" class="headerlink" title="Electron示例 https://github.com/waptak/Electron-DLL-Reader"></a>Electron示例 <a href="https://github.com/waptak/Electron-DLL-Reader" target="_blank" rel="noopener">https://github.com/waptak/Electron-DLL-Reader</a></h3><h2 id="window需要编译环境"><a href="#window需要编译环境" class="headerlink" title="window需要编译环境"></a>window需要编译环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npm i 报错内容</span></span><br><span class="line">gyp ERR! find VS msvs_version not <span class="built_in">set</span> from <span class="built_in">command</span> line or npm config</span><br><span class="line">gyp ERR! find VS VCINSTALLDIR not <span class="built_in">set</span>, not running <span class="keyword">in</span> VS Command Prompt</span><br><span class="line">gyp ERR! find VS could not use PowerShell to find Visual Studio 2017 or newer</span><br><span class="line">gyp ERR! find VS looking <span class="keyword">for</span> Visual Studio 2015</span><br><span class="line">gyp ERR! find VS - not found</span><br><span class="line">gyp ERR! find VS not looking <span class="keyword">for</span> VS2013 as it is only supported up to Node.js 8</span><br><span class="line">gyp ERR! find VS</span><br><span class="line">gyp ERR! find VS **************************************************************</span><br><span class="line">gyp ERR! find VS You need to install the latest version of Visual Studio</span><br><span class="line">gyp ERR! find VS including the “Desktop development with C++” workload.</span><br><span class="line">gyp ERR! find VS For more information consult the documentation at:</span><br><span class="line">gyp ERR! find VS https://github.com/nodejs/node-gyp<span class="comment">#on-windows</span></span><br><span class="line">gyp ERR! find VS **************************************************************</span><br><span class="line">gyp ERR! find VS</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: Could not find any Visual Studio installation to use</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  需要安装 python 2.7，以下命令已包含  使用PowerShell 管理员模式执行此命令</span></span><br><span class="line">$ npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure><h2 id="本来使用的ffi包，因为在Electron高版本下编译失败，故改为ffi-napi"><a href="#本来使用的ffi包，因为在Electron高版本下编译失败，故改为ffi-napi" class="headerlink" title="本来使用的ffi包，因为在Electron高版本下编译失败，故改为ffi-napi"></a>本来使用的ffi包，因为在Electron高版本下编译失败，故改为ffi-napi</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">//package.json</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "dependencies" :&#123;</span><br><span class="line">    ...</span><br><span class="line">    "ffi-napi": "^3.0.1",</span><br><span class="line">    "iconv-lite": "^0.6.2",</span><br><span class="line">    "ref-napi": "^3.0.1",</span><br><span class="line">    "ref-array-napi": "^1.2.1"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ffi = <span class="built_in">require</span>(<span class="string">'ffi-napi'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> ref = <span class="built_in">require</span>(<span class="string">'ref-napi'</span>)</span><br><span class="line"><span class="keyword">const</span> refArray = <span class="built_in">require</span>(<span class="string">'ref-array-napi'</span>)</span><br><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</span><br><span class="line"><span class="keyword">var</span> dllPath = path.resolve(<span class="string">'Termb.dll'</span>);</span><br><span class="line"><span class="comment">// 根据dll中的api方法配置</span></span><br><span class="line"><span class="keyword">var</span> lib = ffi.Library(dllPath, &#123;</span><br><span class="line">  <span class="string">'CVR_InitComm'</span>: [<span class="string">'int'</span>, [<span class="string">'int'</span>]],</span><br><span class="line">  <span class="string">'CVR_CloseComm'</span>: [<span class="string">'int'</span>,[]],</span><br><span class="line">  <span class="string">'CVR_Authenticate'</span>: [<span class="string">'int'</span>,[]],</span><br><span class="line">  <span class="string">'CVR_Read_FPContent'</span>: [<span class="string">'int'</span>, []],</span><br><span class="line">  <span class="string">'GetPeopleName'</span>:[<span class="string">'int'</span> ,[ref.refType(<span class="string">'char'</span>) , ref.refType(<span class="string">'int'</span>)]]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iRetUSB = lib.CVR_InitComm(<span class="number">1001</span>)</span><br><span class="line"><span class="keyword">if</span> (iRetUSB != <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> authenticate = lib.CVR_Authenticate();</span><br><span class="line"><span class="keyword">if</span> (authenticate != <span class="number">1</span>) &#123;</span><br><span class="line">  lib.CVR_CloseComm();</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readContent = lib.CVR_Read_FPContent();</span><br><span class="line"><span class="keyword">if</span> (readContent != <span class="number">1</span>) &#123;</span><br><span class="line">  lib.CVR_CloseComm();</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleRef = ref.alloc(<span class="string">'int'</span>);</span><br><span class="line"><span class="keyword">var</span> lt = Buffer.alloc(<span class="number">128</span>);</span><br><span class="line">lib.GetPeopleName(lt , handleRef);</span><br><span class="line"><span class="keyword">var</span> name = iconv.decode(lt, <span class="string">'GBK'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'GetPeopleName'</span>,name)</span><br></pre></td></tr></table></figure><h2 id="Electron中打包需要注意的"><a href="#Electron中打包需要注意的" class="headerlink" title="Electron中打包需要注意的"></a>Electron中打包需要注意的</h2><ul><li>NodeJS版本建议10+以上,</li><li><p>使用<code>electron-builder</code>打包时需要配置<code>dll相关文件和目录</code>为<code>extraResources</code></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "build": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "extraResources": [</span><br><span class="line">      "./dll" //放dll的目录，也可以用通配符匹配dll</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取dll路径需要判断 , 打包后路径和在调试时路径不一致，可自己根据路径中<code>.asar</code>判断</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dllPath = path.join((__dirname.includes(<span class="string">".asar"</span>) ? process.resourcesPath : __dirname) , <span class="string">'dll/Termb.dll'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebRTC信令服务器Coturn搭建(ubuntu)</title>
      <link href="/2020/08/15/WebRTC%E4%BF%A1%E4%BB%A4%E6%9C%8D%E5%8A%A1%E5%99%A8Coturn%E6%90%AD%E5%BB%BA/"/>
      <content type="html"><![CDATA[<h1 id="Coturn服务器搭建-turn-stun"><a href="#Coturn服务器搭建-turn-stun" class="headerlink" title="Coturn服务器搭建(turn  stun)"></a>Coturn服务器搭建(turn  stun)</h1><h1 id="防火墙开放3478端口"><a href="#防火墙开放3478端口" class="headerlink" title="防火墙开放3478端口"></a>防火墙开放3478端口</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">$ apt-get install openssl libssl-dev make</span><br><span class="line"></span><br><span class="line"><span class="comment"># libevent 下载编译</span></span><br><span class="line">$ wget https://github.com/libevent/libevent/releases/download/release-2.1.10-stable/libevent-2.1.10-stable.tar.gz</span><br><span class="line">$ tar -zxvf libevent-2.1.10-stable.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> libevent-2.1.10-stable</span><br><span class="line">$ ./configure</span><br><span class="line">$ make &amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment">## 用户信息默认保存在sqlite ,也可以使用mysql</span></span><br><span class="line">$ apt-get install sqlite libsqlite3-dev</span><br></pre></td></tr></table></figure><h2 id="下载coturn源码并编译"><a href="#下载coturn源码并编译" class="headerlink" title="下载coturn源码并编译"></a>下载coturn源码并编译</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译</span></span><br><span class="line">$ wget https://github.com/coturn/coturn/archive/4.5.1.1.tar.gz</span><br><span class="line">$ tar -zxvf 4.5.1.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> coturn-4.5.1.1</span><br><span class="line">$ ./configure</span><br><span class="line">$ make &amp; make install</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">$ <span class="built_in">which</span> turnserver</span><br><span class="line"><span class="comment"># 签名证书</span></span><br><span class="line">openssl req -x509 -newkey rsa:2048 -keyout /etc/turn_server_pkey.pem -out /etc/turn_server_cert.pem -days 99999 -nodes</span><br></pre></td></tr></table></figure><h2 id="修改配置-usr-local-etc-turnserver-conf"><a href="#修改配置-usr-local-etc-turnserver-conf" class="headerlink" title="修改配置 /usr/local/etc/turnserver.conf"></a>修改配置 <code>/usr/local/etc/turnserver.conf</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制默认版本</span></span><br><span class="line">$ cp /usr/<span class="built_in">local</span>/etc/turnserver.conf.default /usr/<span class="built_in">local</span>/etc/turnserver.conf</span><br><span class="line"></span><br><span class="line">relay-device=eth0 <span class="comment"># 网卡</span></span><br><span class="line">listening-ip=x.x.x.x <span class="comment"># 内网地址  </span></span><br><span class="line">listening-port=3478 </span><br><span class="line">tls-listening-port=5349</span><br><span class="line">relay-ip=x.x.x.x <span class="comment"># 内网地址</span></span><br><span class="line">external-ip=x.x.x.x <span class="comment"># 外网地址</span></span><br><span class="line">relay-threads=50</span><br><span class="line">lt-cred-mech</span><br><span class="line">cert=/etc/turn_server_cert.pem <span class="comment"># 上面生成的证书</span></span><br><span class="line">pkey=/etc/turn_server_pkey.pem <span class="comment"># 上面生成的证书</span></span><br><span class="line">pidfile=<span class="string">"/var/run/turnserver.pid"</span></span><br><span class="line">min-port=49152</span><br><span class="line">max-port=65535</span><br><span class="line">user=xxxx:123456 <span class="comment"># 用户名和密码</span></span><br><span class="line">cli-password=123456 <span class="comment"># 不指定会抛错</span></span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ turnserver -o -a -f -user=xxxx:123456 -r jiangsu</span><br><span class="line"><span class="comment"># 验证端口</span></span><br><span class="line">$ lsof -i:3478</span><br></pre></td></tr></table></figure><h2 id="穿透监测网址-https-webrtc-github-io-samples-src-content-peerconnection-trickle-ice"><a href="#穿透监测网址-https-webrtc-github-io-samples-src-content-peerconnection-trickle-ice" class="headerlink" title="穿透监测网址 https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/"></a>穿透监测网址 <a href="https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/" target="_blank" rel="noopener">https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/</a></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iceServer = &#123;</span><br><span class="line">    iceServers: [      </span><br><span class="line">      &#123;</span><br><span class="line">        url: <span class="string">"stun:xxx:3478"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        urls: <span class="string">"turn:xxxx:3478"</span>,</span><br><span class="line">        username: <span class="string">"xxxx"</span>,</span><br><span class="line">        credential: <span class="string">"123456"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> WebRTC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis 5.0 + docker 集群部署</title>
      <link href="/2020/03/11/redis-5-0-docker-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
      <content type="html"><![CDATA[<h1 id="redis-5-0-docker集群配置"><a href="#redis-5-0-docker集群配置" class="headerlink" title="redis 5.0 + docker集群配置"></a>redis 5.0 + docker集群配置</h1><blockquote><h2 id="踩坑说明"><a href="#踩坑说明" class="headerlink" title="踩坑说明"></a>踩坑说明</h2></blockquote><ul><li><p>docker容器<code>network_mode</code>没有使用<code>host</code>模式，最初不想改变内部端口，只改对外端口，没用<code>host</code>模式。虽然组建集群成功，但有如下情况</p><ul><li>redis内部redirect时会自动内部分配的ip，导致和外部网络不在同一网段</li><li>出现的结果：用redis-cli进入容器操作都正常，但外部项目使用或者redis工具查看操作时就卡住</li><li>nodejs项目中使用ioredis测试，写入和读取都没有反应，也不报错</li></ul></li><li><p>防火墙端口相关，被自己的mac坑了半天，建议不要在mac上测试了，服务器上的话也关了防火墙试，测试成功再开放端口测试</p></li></ul><blockquote><h2 id="综上改回host模式测试成功，以下记录部署流程，多台其实一样"><a href="#综上改回host模式测试成功，以下记录部署流程，多台其实一样" class="headerlink" title="综上改回host模式测试成功，以下记录部署流程，多台其实一样"></a>综上改回<code>host</code>模式测试成功，以下记录部署流程，多台其实一样</h2></blockquote><ul><li><p>新建6个目录<code>redis_&lt;端口&gt;</code></p></li><li><p>准备<code>redis.conf</code>文件，放在新建的目录中，根据不同端口修改以下参数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 考虑安全起见，可以配置成被访问的网卡ip</span><br><span class="line">bind 0.0.0.0</span><br><span class="line"># 自己定义端口</span><br><span class="line">port 6375</span><br><span class="line"># 建议和端口一致</span><br><span class="line">pidfile /var/run/redis_6375.pid</span><br><span class="line"># 集群时访问密码，和requirepass设置成一致相对方便</span><br><span class="line">masterauth 123456</span><br><span class="line">requirepass 123456</span><br><span class="line"># 开启集群</span><br><span class="line">cluster-enabled yes</span><br><span class="line"># 建议和端口一致，不要与其他容器的重名，看到有人重名后有问题</span><br><span class="line">cluster-config-file nodes-6375.conf</span><br><span class="line"># 持久化，根据自己需求修改，不是必须的</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></li><li><p>docker-compose.yml 配置文件</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.4'</span></span><br><span class="line"><span class="comment"># 共用配置项</span></span><br><span class="line"><span class="attr">x-image:</span></span><br><span class="line">  <span class="string">&amp;default-image</span></span><br><span class="line"><span class="attr">  redis:</span><span class="number">5.0</span></span><br><span class="line"><span class="attr">x-command:</span></span><br><span class="line">  <span class="string">&amp;default-command</span></span><br><span class="line">  <span class="string">["redis-server",</span> <span class="string">"/etc/redis/redis.conf"</span><span class="string">]</span>  </span><br><span class="line"><span class="attr">x-netmode:</span></span><br><span class="line">  <span class="string">&amp;default-netmode</span></span><br><span class="line">  <span class="string">host</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器配置</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  redis_slave_1:</span>    </span><br><span class="line"><span class="attr">    image:</span> <span class="string">*default-image</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis_slave_1</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6371/redis.conf:/etc/redis/redis.conf</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6371/data:/data</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">*default-command</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">*default-netmode</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  redis_slave_2:</span>    </span><br><span class="line"><span class="attr">    image:</span> <span class="string">*default-image</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis_slave_2</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6372/redis.conf:/etc/redis/redis.conf</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6372/data:/data</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">*default-command</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">*default-netmode</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  redis_slave_3:</span>    </span><br><span class="line"><span class="attr">    image:</span> <span class="string">*default-image</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis_slave_3</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6373/redis.conf:/etc/redis/redis.conf</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6373/data:/data</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">*default-command</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">*default-netmode</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  redis_slave_4:</span>    </span><br><span class="line"><span class="attr">    image:</span> <span class="string">*default-image</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis_slave_4</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6374/redis.conf:/etc/redis/redis.conf</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6374/data:/data</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">*default-command</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">*default-netmode</span></span><br><span class="line"><span class="attr">  redis_slave_5:</span>    </span><br><span class="line"><span class="attr">    image:</span> <span class="string">*default-image</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis_slave_5</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6375/redis.conf:/etc/redis/redis.conf</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6375/data:/data</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">*default-command</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">*default-netmode</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  redis_slave_6:</span>    </span><br><span class="line"><span class="attr">    image:</span> <span class="string">*default-image</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis_slave_6</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6376/redis.conf:/etc/redis/redis.conf</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">./redis_6376/data:/data</span></span><br><span class="line"><span class="attr">    environment:</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">*default-command</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">*default-netmode</span></span><br></pre></td></tr></table></figure></li><li><p>启动容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p>使用镜像<code>goodsmileduck/redis-cli:v5.0.3</code> 创建集群，多台服务器就根据ip修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -a 表示连接密码</span></span><br><span class="line"><span class="comment"># --cluster-replicas 1 表示 一主一从</span></span><br><span class="line"><span class="comment"># --cluster create 后面表示需要集群的redis主机和端口</span></span><br><span class="line">$ docker run --rm -it goodsmileduck/redis-cli:v5.0.3 redis-cli -a 123456 --cluster-replicas 1 --cluster create 192.168.30.111:6371 192.168.30.111:6372 192.168.30.111:6373 192.168.30.111:6374  192.168.30.111:6375 192.168.30.111:6376</span><br></pre></td></tr></table></figure></li><li><p>连接一台测试，也可以用可视化工具</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --rm -it goodsmileduck/redis-cli:v5.0.3 redis-cli -c -h 192.168.30.111 -p 6371 -a 123456</span><br></pre></td></tr></table></figure></li></ul><blockquote><h2 id="顺便写下nodejs中ioredis使用"><a href="#顺便写下nodejs中ioredis使用" class="headerlink" title="顺便写下nodejs中ioredis使用"></a>顺便写下nodejs中ioredis使用</h2></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Redis = <span class="built_in">require</span>(<span class="string">"ioredis"</span>);</span><br><span class="line"><span class="keyword">var</span> cluster = <span class="keyword">new</span> Redis.Cluster([&#123;</span><br><span class="line">  port: <span class="number">6371</span>,</span><br><span class="line">  host: <span class="string">'192.168.30.111'</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  port: <span class="number">6372</span>,</span><br><span class="line">  host: <span class="string">'192.168.30.111'</span>,</span><br><span class="line">&#125;], &#123;</span><br><span class="line">  redisOptions: &#123;</span><br><span class="line">    password: <span class="string">"123456"</span>,</span><br><span class="line">    <span class="comment">// scaleReads:'slave'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">cluster.set(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</span><br><span class="line">cluster.get(<span class="string">"foo"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
            <tag> cluster </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker compose 部署mongodb相关记录</title>
      <link href="/2019/07/11/docker%E9%83%A8%E7%BD%B2mongodb%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <content type="html"><![CDATA[<h3 id="docker-compose-发布mongodb"><a href="#docker-compose-发布mongodb" class="headerlink" title="docker-compose 发布mongodb"></a>docker-compose 发布mongodb</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mongo:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mongo:4.1.13</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line">    <span class="comment"># 数据挂载</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./mongodb/data/db:/data/db</span></span><br><span class="line">    <span class="comment"># 备份目录挂载</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./mongodb/backup:/data/backup:rw</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="进入容器-备份命令"><a href="#进入容器-备份命令" class="headerlink" title="进入容器 备份命令"></a>进入容器 备份命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose <span class="built_in">exec</span> mongo /bin/sh</span><br><span class="line"><span class="comment"># dump出 publish表  用户 root 密码 root  </span></span><br><span class="line">$ mongodump -d publish -u root -p root --authenticationDatabase admin -o /data/backup</span><br><span class="line"><span class="comment"># export出 collection</span></span><br><span class="line">$ mongoexport -d publish -u root -p root --authenticationDatabase admin  -c servers -o /data/backup/json/server.json</span><br></pre></td></tr></table></figure><h3 id="恢复命令"><a href="#恢复命令" class="headerlink" title="恢复命令"></a>恢复命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># restore导入 --drop为删除原表后还原</span></span><br><span class="line">mongorestore -d publish -u root --password root --authenticationDatabase admin /data/backup/publish   --drop</span><br><span class="line"><span class="comment"># import导入</span></span><br><span class="line"><span class="comment"># 使用备份文件/data/mongobackup/servers.json导入数据到publish数据库的servers集合中,--upsert表示更新现有数据,如果不使用--upsert,则导入时已经存在的文档会报_id重复,数据不再插入.也可以使用--drop删除原数据.</span></span><br><span class="line">mongoimport -d publish -u root --password root --authenticationDatabase admin -c servers /data/backup/json/server.json --upsert</span><br></pre></td></tr></table></figure><h3 id="使用docker-compose-备份命令，可用于宿主机定时任务"><a href="#使用docker-compose-备份命令，可用于宿主机定时任务" class="headerlink" title="使用docker compose 备份命令，可用于宿主机定时任务"></a>使用docker compose 备份命令，可用于宿主机定时任务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose <span class="built_in">exec</span> -T &lt;mongo容器名称&gt; mongodump -d publish -u root -p root --authenticationDatabase admin -o /data/backup</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker Remote Api 配置</title>
      <link href="/2018/05/31/Docker-Remote-Api-%E9%85%8D%E7%BD%AE/"/>
      <content type="html"><![CDATA[<h1 id="Docker-Remote-Api-相关配置"><a href="#Docker-Remote-Api-相关配置" class="headerlink" title="Docker Remote Api 相关配置"></a>Docker Remote Api 相关配置</h1><p><em>基于Ubuntu 16.04 ,  Docker Version 18.05.0-ce , API Version: 1.37</em></p><h2 id="开启API"><a href="#开启API" class="headerlink" title="开启API"></a>开启API</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:1234</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">$ curl http://localhost:1234/version</span><br></pre></td></tr></table></figure><blockquote><p>输出内容<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"Platform"</span>:&#123;<span class="attr">"Name"</span>:<span class="string">""</span>&#125;,<span class="attr">"Components"</span>:[&#123;<span class="attr">"Name"</span>:<span class="string">"Engine"</span>,<span class="attr">"Version"</span>:<span class="string">"18.05.0-ce"</span>,<span class="attr">"Details"</span>:&#123;<span class="attr">"ApiVersion"</span>:<span class="string">"1.37"</span>,<span class="attr">"Arch"</span>:<span class="string">"amd64"</span>,<span class="attr">"BuildTime"</span>:<span class="string">"2018-05-09T22:14:32.000000000+00:00"</span>,<span class="attr">"Experimental"</span>:<span class="string">"false"</span>,<span class="attr">"GitCommit"</span>:<span class="string">"f150324"</span>,<span class="attr">"GoVersion"</span>:<span class="string">"go1.9.5"</span>,<span class="attr">"KernelVersion"</span>:<span class="string">"4.4.0-31-generic"</span>,<span class="attr">"MinAPIVersion"</span>:<span class="string">"1.12"</span>,<span class="attr">"Os"</span>:<span class="string">"linux"</span>&#125;&#125;],<span class="attr">"Version"</span>:<span class="string">"18.05.0-ce"</span>,<span class="attr">"ApiVersion"</span>:<span class="string">"1.37"</span>,<span class="attr">"MinAPIVersion"</span>:<span class="string">"1.12"</span>,<span class="attr">"GitCommit"</span>:<span class="string">"f150324"</span>,<span class="attr">"GoVersion"</span>:<span class="string">"go1.9.5"</span>,<span class="attr">"Os"</span>:<span class="string">"linux"</span>,<span class="attr">"Arch"</span>:<span class="string">"amd64"</span>,<span class="attr">"KernelVersion"</span>:<span class="string">"4.4.0-31-generic"</span>,<span class="attr">"BuildTime"</span>:<span class="string">"2018-05-09T22:14:32.000000000+00:00"</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="部分接口"><a href="#部分接口" class="headerlink" title="部分接口"></a>部分接口</h1>  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取所有容器信息</span></span><br><span class="line">GET <span class="string">/containers/json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定容器信息</span></span><br><span class="line">GET <span class="string">/containers/</span><span class="params">(id)</span><span class="string">/json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定容器信息</span></span><br><span class="line">GET <span class="string">/containers/</span><span class="params">(id)</span><span class="string">/logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出容器</span></span><br><span class="line">GET <span class="string">/containers/</span><span class="params">(id)</span><span class="string">/export</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">POST <span class="string">/containers/</span><span class="params">(id)</span><span class="string">/start</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">POST <span class="string">/containers/</span><span class="params">(id)</span><span class="string">/stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 终止容器</span></span><br><span class="line">POST <span class="string">/containers/</span><span class="params">(id)</span><span class="string">/kill</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gitlab-runner 配置</title>
      <link href="/2018/05/20/gitlab-runner-%E9%85%8D%E7%BD%AE/"/>
      <content type="html"><![CDATA[<h2 id="gitlab-runner-安装"><a href="#gitlab-runner-安装" class="headerlink" title="gitlab runner 安装"></a>gitlab runner 安装</h2><ol><li><p>非docker安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install gitlab-runner</span><br><span class="line"><span class="comment"># 注册</span></span><br><span class="line">$ sudo gitlab-runner register</span><br></pre></td></tr></table></figure></li><li><p>docker 安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">$ docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  gitlab/gitlab-runner:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it gitlab-runner gitlab-runner register</span><br></pre></td></tr></table></figure></li></ol><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#Running in system-mode.                            </span></span><br><span class="line">                                                   </span><br><span class="line"><span class="comment">#Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span></span><br><span class="line">http://192.168.18.111/</span><br><span class="line"><span class="comment">#Please enter the gitlab-ci token for this runner:</span></span><br><span class="line"><span class="comment">#查看gitlab的token</span></span><br><span class="line"><span class="comment">#Please enter the gitlab-ci description for this runner:</span></span><br><span class="line">[ubuntu]: runner</span><br><span class="line"><span class="comment">#Please enter the gitlab-ci tags for this runner (comma separated):</span></span><br><span class="line">gitlab-runner</span><br><span class="line"><span class="comment">#Whether to run untagged builds [true/false]:</span></span><br><span class="line">[<span class="literal">false</span>]: <span class="literal">true</span></span><br><span class="line"><span class="comment">#Whether to lock the Runner to current project [true/false]:</span></span><br><span class="line">[<span class="literal">true</span>]: <span class="literal">true</span></span><br><span class="line"><span class="comment">#Registering runner... succeeded                     runner=vmYsE-7g</span></span><br><span class="line"><span class="comment">#Please enter the executor: parallels, ssh, virtualbox, docker+machine, docker-ssh+machine, kubernetes, docker, docker-ssh, shell:</span></span><br><span class="line">docker</span><br><span class="line"><span class="comment">#Please enter the default Docker image (e.g. ruby:2.1):</span></span><br><span class="line">node:8.9.3 <span class="comment"># aspnetcore 使用microsoft/aspnetcore-build:2.0</span></span><br><span class="line"><span class="comment">#Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!</span></span><br></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ERROR: Failed to create container volume for /builds/human/demo Failed to import image: Error response from daemon: exec: "xz": executable file not found in $PATH</span></span><br><span class="line"><span class="comment"># ERROR: Preparation failed: Failed to import image: Error response from daemon: exec: "xz": executable file not found in $PATH</span></span><br><span class="line">$ sudo apt-get install -y xz-utils</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> gitlab </tag>
            
            <tag> gitlab-runner </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Drone + Gogs CI-CD环境配置</title>
      <link href="/2018/05/10/Drone-Gogs-CI-CD%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <content type="html"><![CDATA[<h1 id="安装-docker-compose-需先安装pip且在6-0版本及以上"><a href="#安装-docker-compose-需先安装pip且在6-0版本及以上" class="headerlink" title="安装 docker-compose (需先安装pip且在6.0版本及以上)"></a>安装 docker-compose (需先安装pip且在6.0版本及以上)</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip install docker-compose</span><br></pre></td></tr></table></figure><h1 id="新建-docker-compose-yaml-文件"><a href="#新建-docker-compose-yaml-文件" class="headerlink" title="新建 docker-compose.yaml 文件"></a>新建 docker-compose.yaml 文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  drone-server:</span><br><span class="line">    image: drone/drone:0.8</span><br><span class="line"></span><br><span class="line">    ports:</span><br><span class="line">      - 8000:8000</span><br><span class="line">      - 9000</span><br><span class="line">    volumes:</span><br><span class="line">      - /var/lib/drone:/var/lib/drone/</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - DRONE_OPEN=<span class="literal">true</span>      </span><br><span class="line">      - DRONE_HOST=http://XXXXXX <span class="comment"># drone的访问地址</span></span><br><span class="line">      <span class="comment"># gogs 配置</span></span><br><span class="line">      - DRONE_GOGS=<span class="literal">true</span></span><br><span class="line">      - DRONE_GOGS_URL=http://XXXXXX <span class="comment"># gog访问网址</span></span><br><span class="line">      - DRONE_GOGS_GIT_USERNAME=XXXXXX  <span class="comment"># gog登录用户名</span></span><br><span class="line">      - DRONE_GOGS_GIT_PASSWORD=XXXXXX <span class="comment"># gog登录密码</span></span><br><span class="line">      - DRONE_GOGS_PRIVATE_MODE=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  drone-agent:</span><br><span class="line">    image: drone/agent:0.8</span><br><span class="line"></span><br><span class="line">    restart: always</span><br><span class="line">    depends_on:</span><br><span class="line">      - drone-server</span><br><span class="line">    volumes:</span><br><span class="line">      - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">    environment:</span><br><span class="line">      - DRONE_SERVER=drone-server:9000</span><br><span class="line">      - DRONE_SECRET=<span class="variable">$&#123;DRONE_SECRET&#125;</span></span><br></pre></td></tr></table></figure><h1 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose  up </span><br><span class="line">docker-compose  down</span><br><span class="line">docker-compose  restart</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> gogs </tag>
            
            <tag> drone </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shadowsocket服务器搭建</title>
      <link href="/2018/04/11/Shadowsocket%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
      <content type="html"><![CDATA[<h3 id="Ubuntu-16-04"><a href="#Ubuntu-16-04" class="headerlink" title="Ubuntu 16.04"></a>Ubuntu 16.04</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h3 id="已配置文件启动-使用"><a href="#已配置文件启动-使用" class="headerlink" title="已配置文件启动 使用"></a>已配置文件启动 使用</h3><blockquote><p>新建 /etc/shadowsocks.json 文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## 单账号</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"xxx.xxx.xxx.xxx"</span>, <span class="comment"># 服务器IP</span></span><br><span class="line">    <span class="string">"server_port"</span>:443,</span><br><span class="line">    <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"XXXXXX"</span>, <span class="comment"># 密码自定义</span></span><br><span class="line">    <span class="string">"timeout"</span>:300,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 多账号</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"xxx.xxx.xxx.xxx"</span>,</span><br><span class="line">    <span class="string">"port_password"</span>: &#123;</span><br><span class="line">        <span class="string">"443"</span>: <span class="string">"XXXXXX"</span>, <span class="comment"># 密码自定义</span></span><br><span class="line">        <span class="string">"444"</span>: <span class="string">"XXXXXX"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,    </span><br><span class="line">    <span class="string">"timeout"</span>:300,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ sudo chmod 755 /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>已配置文件启动 (后台运行加-d  不加则前台运行)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">$ sudo ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><blockquote><p>编辑 /etc/rc.local 文件, 在 exit 0 这一行的 <strong><em>上边</em></strong> 加入如下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/ssserver –c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo less /var/<span class="built_in">log</span>/shadowsocks.log</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> shadowsocket </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VSCode下WebApi+Swagger-ui插件配置</title>
      <link href="/2018/03/20/VSCode%E4%B8%8BWebApi-Swagger-ui%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
      <content type="html"><![CDATA[<h3 id="安装包-swashbuckle-aspnetcore"><a href="#安装包-swashbuckle-aspnetcore" class="headerlink" title="安装包 swashbuckle.aspnetcore"></a>安装包 swashbuckle.aspnetcore</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dotnet add package swashbuckle.aspnetcore</span><br></pre></td></tr></table></figure><h3 id="修改-startup-cs"><a href="#修改-startup-cs" class="headerlink" title="修改 startup.cs"></a>修改 startup.cs</h3><ul><li><p>添加引用</p><pre>using Swashbuckle.AspNetCore.Swagger;using Microsoft.Extensions.PlatformAbstractions;using System.IO;</pre></li><li><p>在 ConfigureServices 方法内添加</p></li></ul><pre>services.AddSwaggerGen(c =>  {      c.SwaggerDoc("v1", new Info      {          Version = "v1",          Title = "Demo Api"      });      var basePath = PlatformServices.Default.Application.ApplicationBasePath;      var xmlPath = Path.Combine(basePath, "CoreApi.xml"); //CoreApi.xml 自己定义名称      c.IncludeXmlComments(xmlPath);  });</pre><ul><li>在 Configure 方法内添加<pre>app.UseSwagger();app.UseSwaggerUI(c => {  c.SwaggerEndpoint("/swagger/v1/swagger.json", "DemoApi");});</pre></li></ul><h3 id="修改工程文件-xxxx-csproj-添加"><a href="#修改工程文件-xxxx-csproj-添加" class="headerlink" title="修改工程文件 xxxx.csproj 添加"></a>修改工程文件 xxxx.csproj 添加</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span> <span class="attr">Condition</span>=<span class="string">"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">DocumentationFile</span>&gt;</span>bin\Debug\netcoreapp2.0\CoreApi.xml<span class="tag">&lt;/<span class="name">DocumentationFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> netCore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netCore </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu 16.04 自动备份 mysql</title>
      <link href="/2018/03/13/Ubuntu-16-04-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD-mysql/"/>
      <content type="html"><![CDATA[<h3 id="新建备份程序"><a href="#新建备份程序" class="headerlink" title="新建备份程序"></a>新建备份程序</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /home/bak/</span><br><span class="line">$ <span class="built_in">cd</span> /home/bak/</span><br><span class="line">$ vim bakmysql</span><br><span class="line"><span class="comment">#日期参数</span></span><br><span class="line">rq=`date +%Y%m%d`</span><br><span class="line"><span class="comment">#备份命令 例如：用户名和密码都为root 要备份的数据库名 database</span></span><br><span class="line">mysqldump -uroot -proot database &gt; /home/bak/mysql<span class="variable">$rq</span>.sql</span><br></pre></td></tr></table></figure><h3 id="为备份程序添加权限"><a href="#为备份程序添加权限" class="headerlink" title="为备份程序添加权限"></a>为备份程序添加权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表示 +（添加）x（执行）的权限  也可 chmod 777</span></span><br><span class="line">$ chmod +x /home/bak/bakmysql</span><br></pre></td></tr></table></figure><h3 id="修改-etc-crontab"><a href="#修改-etc-crontab" class="headerlink" title="修改/etc/crontab"></a>修改/etc/crontab</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/crontab</span><br><span class="line"><span class="comment">#每天3点30分执行</span></span><br><span class="line">30 3 * * * root /home/bak/bakmysql</span><br></pre></td></tr></table></figure><h3 id="重启crontab"><a href="#重启crontab" class="headerlink" title="重启crontab"></a>重启crontab</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service crond start <span class="comment">#启动服务</span></span><br><span class="line">$ service crond stop <span class="comment">#关闭服务</span></span><br><span class="line">$ service crond restart <span class="comment">#重启服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#发行版本没有service这个命令时</span></span><br><span class="line">/etc/init.d/cron stop</span><br><span class="line">/etc/init.d/cron start</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu 16.04 共享目录访问</title>
      <link href="/2018/02/06/ubuntu-%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE/"/>
      <content type="html"><![CDATA[<h3 id="安装-samba-服务器"><a href="#安装-samba-服务器" class="headerlink" title="安装 samba 服务器"></a>安装 <strong><em>samba</em></strong> 服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install samba</span><br><span class="line"><span class="comment"># Linux客户端测试用</span></span><br><span class="line">$ sudo apt-get install smbclient</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>修改配置文件 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/samba/smb.conf</span><br><span class="line"><span class="comment">#在最后添加</span></span><br><span class="line">[share]</span><br><span class="line">path = /home/share <span class="comment">#共享路径</span></span><br><span class="line">browseable = yes <span class="comment">#该目录是否可显示</span></span><br><span class="line">writable = yes </span><br><span class="line">comment = smb share <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li><p>共享目录权限配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">一般来说，该目录的权限为755，将其改为777之后，Owner之外的其他用户才有权限写入。</span><br><span class="line">$ sudo chmod 777 /home/share</span><br></pre></td></tr></table></figure></li><li><p>创建samba用户 <strong><em>（注意，创建samba用户之前，必须先确保有一个同名的Linux用户，否则samba用户会创建失败。）</em></strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建系统用户</span></span><br><span class="line">$ sudo groupadd smbuser -g 6000</span><br><span class="line">$ sudo useradd smbuser -u 6000 -g 6000 -s /sbin/nologin -d /dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建samba用户</span></span><br><span class="line">$ sudo smbpasswd -a smbuser</span><br></pre></td></tr></table></figure></li><li><p>重启samba服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo service smbd restart</span><br></pre></td></tr></table></figure></li></ul><h3 id="客户端测试访问"><a href="#客户端测试访问" class="headerlink" title="客户端测试访问"></a>客户端测试访问</h3><ul><li><p>Linux客户端访问测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ smbclient -L //localhost/share</span><br></pre></td></tr></table></figure></li><li><p>windows 访问测试 <strong><em>另外，在Windows客户端使用net use </em> /del /y这条命令可以清理访问缓存。*</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\\IP或主机名\\share</span><br><span class="line"><span class="comment">#如果public = no，此时需要输入samba用户密码；如果public = yes，则作为nobody用户直接访问。</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker-jenkin-node项目-自动化部署记录</title>
      <link href="/2018/01/05/docker-jenkin-node%E9%A1%B9%E7%9B%AE-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/"/>
      <content type="html"><![CDATA[<h3 id="docker-安装-jenkin"><a href="#docker-安装-jenkin" class="headerlink" title="docker 安装 jenkin"></a>docker 安装 jenkin</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull jenkin:latest</span><br></pre></td></tr></table></figure><h3 id="Publish-Over-SSH-插件安装"><a href="#Publish-Over-SSH-插件安装" class="headerlink" title="Publish Over SSH 插件安装"></a>Publish Over SSH 插件安装</h3><h3 id="Publish-Over-SSH-配置"><a href="#Publish-Over-SSH-配置" class="headerlink" title="Publish Over SSH 配置"></a>Publish Over SSH 配置</h3><ul><li><p>jenkin容器 生成 ssh key</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li><li><p>jenkin容器 在.ssh目录生成config文件 并设置权限 chmod 600 ~/.ssh/config</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用于ssh登录宿主机</span></span><br><span class="line">host sshHost <span class="comment">#自定义名称</span></span><br><span class="line">user <span class="built_in">test</span> <span class="comment">#宿主机登录的用户名</span></span><br><span class="line">hostname 192.168.18.112 <span class="comment">#宿主机IP</span></span><br><span class="line">port 22 <span class="comment">#ssh 端口</span></span><br><span class="line">identityfile ~/.ssh/jenkins <span class="comment">#容器内私钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用于拉取git项目</span></span><br><span class="line">host gitlab</span><br><span class="line">user git</span><br><span class="line">hostname 192.168.18.111</span><br><span class="line">port 22</span><br><span class="line">identityfile ~/.ssh/jenkins</span><br></pre></td></tr></table></figure></li><li><p>将jenkin容器生成的公钥放入宿主机.ssh目录 并加入authorized_keys</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat jenkins.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>jenkin容器 测试连接宿主机</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh sshHost</span><br></pre></td></tr></table></figure></li><li><p>jenkin 配置 ssh</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">key <span class="comment">#填写jenkin容器内生成的私钥</span></span><br><span class="line">ssh server</span><br><span class="line">    Name : <span class="comment">#随意填写 用于系统内选择 </span></span><br><span class="line">    Hostname : 192.168.18.112 <span class="comment">#宿主机名称</span></span><br><span class="line">    Username : <span class="built_in">test</span> <span class="comment">#宿主机用于登录的用户名</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="GIT项目增加jenkin-pub-公钥"><a href="#GIT项目增加jenkin-pub-公钥" class="headerlink" title="GIT项目增加jenkin.pub 公钥"></a>GIT项目增加jenkin.pub 公钥</h3><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><ul><li><p>源码管理 选择git</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Repository URL ： git@gitlab:human/demo/human.bus.git <span class="comment"># git 服务器用户   gitlab: config配置的host</span></span><br><span class="line">Credentials ： <span class="comment">#选择SSH Username with private key 填写jenkin容器内生成的私钥</span></span><br></pre></td></tr></table></figure></li><li><p>构建环境 选择 Send files or execute commands over SSH after the build runs</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Exec <span class="built_in">command</span> : </span><br><span class="line"></span><br><span class="line">$ docker stop node || <span class="literal">true</span> \ <span class="comment">#停止容器</span></span><br><span class="line">     &amp;&amp; docker rm node || <span class="literal">true</span> \ <span class="comment">#删除容器</span></span><br><span class="line">     &amp;&amp; <span class="built_in">cd</span> /home/<span class="built_in">test</span>/jenkins_node/workspace/nodeBus \  <span class="comment">#项目目录</span></span><br><span class="line">     &amp;&amp; docker build --rm --no-cache=<span class="literal">true</span>  -t node  - &lt; Dockerfile \ <span class="comment">#删除</span></span><br><span class="line">     &amp;&amp; docker run -d  --name node -p 7000:7000 \ <span class="comment">#根据项目端口设置</span></span><br><span class="line">     -v /home/<span class="built_in">test</span>/jenkins_node/workspace/nodeBus:/home/project \ <span class="comment">#挂载项目目录</span></span><br><span class="line">     node:8.9.3</span><br></pre></td></tr></table></figure></li></ul><h3 id="Dockerfile-放入项目根目录（简易内容）"><a href="#Dockerfile-放入项目根目录（简易内容）" class="headerlink" title="Dockerfile 放入项目根目录（简易内容）"></a>Dockerfile 放入项目根目录（简易内容）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM node:8.9.3</span><br><span class="line"></span><br><span class="line">MAINTAINER biake &lt;zhoubin@uu1x.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /home/project </span><br><span class="line"></span><br><span class="line">EXPOSE 7000 <span class="comment">#根据项目端口设置</span></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"npm"</span>,<span class="string">"start"</span>]</span><br></pre></td></tr></table></figure><h3 id="package-json-npm-命令设置"><a href="#package-json-npm-命令设置" class="headerlink" title="package.json npm 命令设置"></a>package.json npm 命令设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"npm install . &amp;&amp; node ./app.js"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="Git-push-后自动构建"><a href="#Git-push-后自动构建" class="headerlink" title="Git push 后自动构建"></a>Git push 后自动构建</h2><ul><li>jenkins –&gt; 首页 –&gt; 用户</li><li>设置 –&gt; 点击 “show API Token”</li><li>复制API Token内容，返回首页 –&gt; node –&gt; 配置 –&gt; 构建触发器 –&gt; 选择 “触发远程构建” –&gt;粘贴”API Token”内容到”身份验证令牌”</li><li><p>登录gitlab 选择项目 settings –&gt; Integrations </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">url : http://192.168.18.112:49002/job/nodeBus/build?token=&lt;jenkin用户的token&gt;</span><br></pre></td></tr></table></figure></li><li><p>jenkins首页，选择 系统管理–&gt;Configure Global Security</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">勾选 Allow anonymous <span class="built_in">read</span> access</span><br><span class="line">去除勾选 防止跨站点请求伪造</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker常用命令记录</title>
      <link href="/2018/01/05/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#镜像下载</span></span><br><span class="line">$ docker pull ubuntu:16.04 <span class="comment">#镜像：版本号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#镜像列表</span></span><br><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              16.04               00fd29ccc6f1        2 weeks ago         111MB</span><br><span class="line">jenkins             latest              5fc84ab0b7ad        3 weeks ago         809MB</span><br><span class="line">mysql               5.7.20              7d83a47ab2d2        3 weeks ago         408MB</span><br><span class="line">nginx               1.10.3              0346349a1a64        9 months ago        182MB</span><br><span class="line">redis               3.0.6               d4deec2c521c        24 months ago       151MB</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除镜像</span></span><br><span class="line">$ docker image rm &lt;镜像&gt; <span class="comment">#镜像短 ID、镜像长 ID、镜像名 或者 镜像摘要</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#容器运行</span></span><br><span class="line">$ docker run -it --rm \ <span class="comment">#-i：交互操作，-t：终端： --rm：退出容器就删除 </span></span><br><span class="line">    ubuntu:16.04 \ <span class="comment">#以镜像为启动容器</span></span><br><span class="line">    bash <span class="comment"># 在镜像后的是命令 bash是进入交互式shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#容器已运行后 再进入shell</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it &lt;容器ID&gt; bash</span><br></pre></td></tr></table></figure><h3 id="Ngix-容器-（挂载宿主机配置）"><a href="#Ngix-容器-（挂载宿主机配置）" class="headerlink" title="Ngix 容器 （挂载宿主机配置）"></a>Ngix 容器 （挂载宿主机配置）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \  </span><br><span class="line">  --name nginx-uat \  </span><br><span class="line">  -p 80:80 \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  -v /home/<span class="built_in">test</span>/nginxConf/nginx.conf:/etc/nginx/nginx.conf:ro \ <span class="comment"># ro 表示只读  不写则可读可写 或 rw</span></span><br><span class="line">  -v /home/<span class="built_in">test</span>/nginxConf/default:/etc/nginx/sites-available/default:ro \</span><br><span class="line">  nginx:1.10.3</span><br></pre></td></tr></table></figure><h3 id="redis-容器-（挂载宿主机配置-根conf需提供相对应版本）"><a href="#redis-容器-（挂载宿主机配置-根conf需提供相对应版本）" class="headerlink" title="redis 容器 （挂载宿主机配置,根conf需提供相对应版本）"></a>redis 容器 （挂载宿主机配置,根conf需提供相对应版本）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis-test  -p 6379:6379  \</span><br><span class="line">-v /var/www/redis/redis.conf:/usr/<span class="built_in">local</span>/etc/redis/redis.conf \</span><br><span class="line">-v /var/www/redis/data:/data \</span><br><span class="line">redis \</span><br><span class="line">redis-server /usr/<span class="built_in">local</span>/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h3 id="mysql-容器（挂载宿主机配置）"><a href="#mysql-容器（挂载宿主机配置）" class="headerlink" title="mysql 容器（挂载宿主机配置）"></a>mysql 容器（挂载宿主机配置）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d  --name mysql-test  -p 3033:3306 -e MYSQL_ROOT_PASSWORD=123456  -v /var/www/mysql/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf:ro --restart=always  mysql:5.7.20</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu系统下git通过SSH拉取项目问题记录</title>
      <link href="/2017/12/14/Ubuntu%E7%B3%BB%E7%BB%9F%E4%B8%8Bgit%E9%80%9A%E8%BF%87SSH%E6%8B%89%E5%8F%96%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <content type="html"><![CDATA[<h1 id="ssh-目录和文件权限"><a href="#ssh-目录和文件权限" class="headerlink" title="~/.ssh 目录和文件权限"></a><strong><em>~/.ssh</em></strong> 目录和文件权限</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不可用 sudo 否则是属于root用户 不用root用户可能读取不到此文件配置 导致以下提示：</span></span><br><span class="line"><span class="comment">#ssh: Could not resolve hostname gogs: Name or service not known</span></span><br><span class="line"><span class="comment">#fatal: Could not read from remote repository.</span></span><br><span class="line">$ vim config </span><br><span class="line"></span><br><span class="line"><span class="comment">#Bad owner or permissions on /home/uat/.ssh/config</span></span><br><span class="line">$ sudo chmod 600 ~/.ssh/config</span><br><span class="line"></span><br><span class="line"><span class="comment">#git clone 报错 Load key "/home/uat/.ssh/xxxxx": bad permissions</span></span><br><span class="line">$ sudo chmod 600 ~/.ssh/xxxxx</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx 相关命令</title>
      <link href="/2017/12/08/Nginx-%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <content type="html"><![CDATA[<blockquote><p>基础命令</p></blockquote><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install -y nginx</span><br><span class="line"><span class="comment"># ubuntu 16.04 目录 /usr/sbin</span></span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo service nginx restart</span><br></pre></td></tr></table></figure><h3 id="查看版本和已有模块"><a href="#查看版本和已有模块" class="headerlink" title="查看版本和已有模块"></a>查看版本和已有模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /usr/sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.10.3 (Ubuntu)</span><br><span class="line">built with OpenSSL 1.0.2g  1 Mar 2016 (running with OpenSSL 1.0.2g-fips  1 Mar 2016)</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --with-cc-opt=<span class="string">'-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2'</span> --with-ld-opt=<span class="string">'-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now'</span> --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_v2_module --with-http_sub_module --with-http_xslt_module --with-stream --with-stream_ssl_module --with-mail --with-mail_ssl_module --with-threads</span><br></pre></td></tr></table></figure><blockquote><p>配置</p></blockquote><h3 id="http配置"><a href="#http配置" class="headerlink" title="http配置"></a>http配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># 将80访问转发至8080</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line">        server_name _;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://localhost:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcp配置"><a href="#tcp配置" class="headerlink" title="tcp配置"></a>tcp配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stream &#123;    </span><br><span class="line"><span class="comment">#tcp负载 根据权重轮流转发至113 和 114</span></span><br><span class="line">    upstream hard_socket&#123;</span><br><span class="line">        <span class="comment">#可选算法 </span></span><br><span class="line">        <span class="comment">#最少连接数 least_conn</span></span><br><span class="line">        <span class="comment">#最低平均延迟 least_time first_byte;</span></span><br><span class="line">        <span class="comment">#普通hash算法 hash $remote_addr consistent;</span></span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$remote_addr</span> consistent;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#权重 weight ；最大连接数 max_conns ；连接失败超时 fail_timout ；  max_fails 最大连接失败数</span></span><br><span class="line">        <span class="comment">#以下为30s进行3次尝试失败认为server不可达</span></span><br><span class="line">        server 192.168.18.113:9000 weight=1 max_fails=3 fail_timeout=30s; </span><br><span class="line">        server 192.168.18.114:9000 weight=1 max_fails=3 fail_timeout=30s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#tcp 负载</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 12345;</span><br><span class="line">        proxy_connect_timeout 10s;</span><br><span class="line">        <span class="comment">#连接维持时间，无数据传送则关闭连接</span></span><br><span class="line">        proxy_timeout 30s;</span><br><span class="line">        proxy_pass hard_socket;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#health_check命令将会激活健康监测功能，当有health_check_timeout 将会覆盖掉这个proxy_timeout的值，作为健康监测超时时间应该是显著缩短</span></span><br><span class="line">        <span class="comment">#默认，nginx试着再每5s中连接每个server在upstream server组中。假如连接不能够被建立，nginx认为这个健康监测失败，标识他为不健康。停止连接该server。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#interval ：发送健康请求间隔时间</span></span><br><span class="line">        <span class="comment">#passses : 多少连续的响应才算被考虑为健康的</span></span><br><span class="line">        <span class="comment">#fails ：多少次连续的失败响应才考虑为不健康的</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#health_check insterval=10 passes=2 fails=3;</span></span><br><span class="line">        <span class="comment">#health_check_timeout 5s;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#单一转发</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 45678;</span><br><span class="line">        proxy_pass backend4.example.com:3000;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PowerShell使用posh-git插件</title>
      <link href="/2017/11/30/PowerShell%E4%BD%BF%E7%94%A8posh-git%E6%8F%92%E4%BB%B6/"/>
      <content type="html"><![CDATA[<h2 id="项目地址-https-github-com-dahlbyk-posh-git"><a href="#项目地址-https-github-com-dahlbyk-posh-git" class="headerlink" title="项目地址 https://github.com/dahlbyk/posh-git"></a>项目地址 <a href="https://github.com/dahlbyk/posh-git" target="_blank" rel="noopener">https://github.com/dahlbyk/posh-git</a></h2><blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2></blockquote><h3 id="需要PowerShell-version-5-以上"><a href="#需要PowerShell-version-5-以上" class="headerlink" title="需要PowerShell version 5 以上"></a><strong><em>需要PowerShell version 5 以上</em></strong></h3><h3 id="打开-PowerShell-执行命令"><a href="#打开-PowerShell-执行命令" class="headerlink" title="打开 PowerShell 执行命令"></a>打开 PowerShell 执行命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><h3 id="安装-posh-git"><a href="#安装-posh-git" class="headerlink" title="安装 posh-git"></a>安装 posh-git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Install-Module posh-git</span><br><span class="line"><span class="comment"># 如果没有安装Nuget 会提示自动安装安装输入Y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动安装Nuget</span></span><br><span class="line">Install-PackageProvider NuGet-Force</span><br><span class="line">Import-PackageProvider NuGet-Force</span><br></pre></td></tr></table></figure><h3 id="更新posh-git"><a href="#更新posh-git" class="headerlink" title="更新posh-git"></a>更新posh-git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Update-Module posh-git</span><br></pre></td></tr></table></figure><blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2></blockquote><h3 id="安装完后在C-Users-lt-username-gt-Documents-WindowsPowerShell添加文件profile-ps1，也可输入命令"><a href="#安装完后在C-Users-lt-username-gt-Documents-WindowsPowerShell添加文件profile-ps1，也可输入命令" class="headerlink" title="安装完后在C:\Users\ &lt;username&gt;\Documents\WindowsPowerShell添加文件profile.ps1，也可输入命令"></a>安装完后在C:\Users\ &lt;username&gt;\Documents\WindowsPowerShell添加文件profile.ps1，也可输入命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$profile</span>.CurrentUserCurrentHost</span><br></pre></td></tr></table></figure><h3 id="在文件profile-ps1中添加内容："><a href="#在文件profile-ps1中添加内容：" class="headerlink" title="在文件profile.ps1中添加内容："></a>在文件profile.ps1中添加内容：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Import-Module posh-git</span><br><span class="line"><span class="comment">#可选内容</span></span><br><span class="line"><span class="variable">$GitPromptSettings</span>.DefaultPromptSuffix=<span class="string">'`n$('</span><span class="string">'&gt;'</span><span class="string">' * ($nestedPromptLevel + 1)) '</span></span><br><span class="line"><span class="variable">$GitPromptSettings</span>.DefaultPromptPrefix=<span class="string">'[$(hostname)] '</span></span><br><span class="line"><span class="variable">$GitPromptSettings</span>.DefaultPromptAbbreviateHomeDirectory=<span class="variable">$true</span></span><br></pre></td></tr></table></figure><h3 id="修改powershell默认路径：右键属性修改起始位置"><a href="#修改powershell默认路径：右键属性修改起始位置" class="headerlink" title="修改powershell默认路径：右键属性修改起始位置"></a>修改powershell默认路径：右键属性修改起始位置</h3>]]></content>
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> powershell </tag>
            
            <tag> posh-git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git添加远程仓库</title>
      <link href="/2017/11/21/git%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <content type="html"><![CDATA[<h3 id="没有本地仓库"><a href="#没有本地仓库" class="headerlink" title="没有本地仓库"></a>没有本地仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"first commit"</span></span><br><span class="line">$ git remote add origin https://xxx.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="本地仓库已存在"><a href="#本地仓库已存在" class="headerlink" title="本地仓库已存在"></a>本地仓库已存在</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://xxx.git</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gitlab操作命令</title>
      <link href="/2017/11/18/gitlab%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <content type="html"><![CDATA[<h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl status</span><br></pre></td></tr></table></figure><h3 id="启动，停止，重启"><a href="#启动，停止，重启" class="headerlink" title="启动，停止，重启"></a>启动，停止，重启</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">sudo gitlab-ctl start</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><h3 id="gitlab配置文件-etc-gitlab-gitlab-rb"><a href="#gitlab配置文件-etc-gitlab-gitlab-rb" class="headerlink" title="gitlab配置文件 /etc/gitlab/gitlab.rb"></a>gitlab配置文件 <strong><em>/etc/gitlab/gitlab.rb</em></strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#发件人配置</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_email_from'</span>] = <span class="string">'gitlab@xxx.com'</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_email_display_name'</span>] = <span class="string">'GitLab管理员'</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_email_reply_to'</span>] = <span class="string">'gitlab@xxx.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#备份目录修改</span></span><br><span class="line">gitlab_rails[<span class="string">'backup_path'</span>] = <span class="string">"/home/dev/gitlab_backup"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#邮件服务器配置(网易)</span></span><br><span class="line">gitlab_rails[<span class="string">'smtp_enable'</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'smtp_address'</span>] = <span class="string">"smtp.ym.163.com"</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'smtp_port'</span>] = 25</span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'smtp_user_name'</span>] = <span class="string">"gitlab@xxx.com"</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'smtp_password'</span>] = <span class="string">"xxxxx"</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'smtp_domain'</span>] = <span class="string">"163.com"</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'smtp_authentication'</span>] = <span class="string">"login"</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'smtp_enable_starttls_auto'</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">gitlab_rails[<span class="string">'smtp_tls'</span>] = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="配置修改后重新执行让配置生效"><a href="#配置修改后重新执行让配置生效" class="headerlink" title="配置修改后重新执行让配置生效"></a>配置修改后重新执行让配置生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><h4 id="默认之日目录-var-log-gitlab"><a href="#默认之日目录-var-log-gitlab" class="headerlink" title="默认之日目录 /var/log/gitlab"></a><strong><em>默认之日目录 /var/log/gitlab</em></strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有日志</span></span><br><span class="line">sudo gitlab-ctl tail</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看nginx 访问日志</span></span><br><span class="line">sudo gitlab-ctl tail nginx/gitlab_acces.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看postgresql日志</span></span><br><span class="line">sudo gitlab-ctl tail  postgresql</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git仓库迁移</title>
      <link href="/2017/11/18/git%E4%BB%93%E5%BA%93%E8%BF%81%E7%A7%BB/"/>
      <content type="html"><![CDATA[<h3 id="从原地址克隆一份裸版本库"><a href="#从原地址克隆一份裸版本库" class="headerlink" title="从原地址克隆一份裸版本库"></a>从原地址克隆一份裸版本库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --bare git://github.com/username/project.git</span><br></pre></td></tr></table></figure><h3 id="到新的git服务器上创建新项目-newProject"><a href="#到新的git服务器上创建新项目-newProject" class="headerlink" title="到新的git服务器上创建新项目 newProject"></a>到新的git服务器上创建新项目 newProject</h3><h3 id="以镜像推送方式上传代码到服务器上"><a href="#以镜像推送方式上传代码到服务器上" class="headerlink" title="以镜像推送方式上传代码到服务器上"></a>以镜像推送方式上传代码到服务器上</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> project.git</span><br><span class="line">git push --mirror git@gitlab:group/newproject.git</span><br></pre></td></tr></table></figure><h3 id="删除本地代码"><a href="#删除本地代码" class="headerlink" title="删除本地代码"></a>删除本地代码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">rm -rf project.git</span><br></pre></td></tr></table></figure><h3 id="从新服务器上clone"><a href="#从新服务器上clone" class="headerlink" title="从新服务器上clone"></a>从新服务器上clone</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitlab:group/newproject.git</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
